services:
 frontend:
   image: ghcr.io/worklenz/worklenz-frontend
   build:
     context: ./worklenz-frontend
     dockerfile: Dockerfile
     args:
       - NODE_OPTIONS=--max-old-space-size=1024
   container_name: worklenz_frontend
   ports:
     - "4200:4200"
   depends_on:
     backend:
       condition: service_started
   networks:
     - worklenz-network    
   deploy:
     resources:
       limits:
         memory: 1G
         cpus: '1'
       reservations:
         memory: 512M

 backend:
   image: ghcr.io/worklenz/worklenz-backend
   build:
     context: ./worklenz-backend
     dockerfile: Dockerfile
     args:
       - NODE_OPTIONS=--max-old-space-size=4096
   container_name: worklenz_backend
   ports:
     - "3000:3000"
   depends_on:
     db:
       condition: service_healthy
   environment:
     - ANGULAR_DIST_DIR
     - ANGULAR_SRC_DIR
     - AWS_REGION
     - BACKEND_PUBLIC_DIR
     - BACKEND_VIEWS_DIR
     - COMMIT_BUILD_IMMEDIATELY
     - COOKIE_SECRET
     - DB_HOST
     - DB_MAX_CLIENTS=10
     - DB_NAME
     - DB_PASSWORD
     - DB_PORT
     - DB_USER
     - GOOGLE_CALLBACK_URL
     - GOOGLE_CLIENT_ID
     - GOOGLE_CLIENT_SECRET
     - HOSTNAME
     - LOGIN_FAILURE_REDIRECT
     - NODE_ENV=production
     - PORT
     - SESSION_NAME
     - SESSION_SECRET
     - SLACK_WEBHOOK
     - SOCKET_IO_CORS
     - SOURCE_EMAIL
     - USE_PG_NATIVE
     - BUCKET
     - REGION
     - S3_URL
     - S3_ACCESS_KEY_ID
     - S3_SECRET_ACCESS_KEY
     - NODE_OPTIONS=--max-old-space-size=4096
   networks:
     - worklenz-network  
   deploy:
     resources:
       limits:
         memory: 4G
         cpus: '2'
       reservations:
         memory: 2G

 db:
   image: postgres:15
   container_name: worklenz_db
   environment:
     POSTGRES_DB: "${DB_NAME}"
     POSTGRES_PASSWORD: "${DB_PASSWORD}"
     POSTGRES_MAX_CONNECTIONS: 100
     POSTGRES_SHARED_BUFFERS: 1GB
   healthcheck:
     test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
     interval: 10s
     timeout: 5s
     retries: 5
   networks:
     - worklenz-network  
   volumes:
     - worklenz_postgres_data:/var/lib/postgresql/data
     - ./worklenz-backend/database/:/docker-entrypoint-initdb.d
   deploy:
     resources:
       limits:
         memory: 2G
         cpus: '1'
       reservations:
         memory: 1G

volumes:
 worklenz_postgres_data:
   driver: local

networks:
 worklenz-network:
   name: worklenz-network
   driver: bridge
